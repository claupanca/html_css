LAYOUTS
- the wayt the text, images and all other content is placed on the page
- the layout gives the page a VISUAL structure, into which we can place our content
  
PAGE LAYOUT
	- laying the elements to form the big picture of the website

COMPONENT LAYOUT
	- these is the layout of each component which all together creates the PAGE LAYOUT


BULDING LAYOUTS
	- FLOAT layouts
		- using the old property - FLOAT
		- quickly replaced by newer technologies
		- still used on older websites
	- FLEXBOX		
		- Perfect for 1 dimensional layouts -  a layout which is just a row
		- might be perfect for simpler Component layouts
	- CSS GRID
		- build complete 2 dimensional Layouts - perfect for big page layouts
		- perfect for more complex components

FLOAT LAYOUT
	- FLOAT property
		- the element is taken out of the block structure and all the elements will FLOAT around it
		- if we check the element with FLOAT, will see that the other elements are overlapping with it
		- to fix this, we must use FLOAT on multiple elements
		- we can comparte with ABSOLUTE however, FLOATED elements will affect the rest of the content, wrapping aroung, not la ABSOLUTE where the element it's on top
		- the container will not adjust it;s height

	- CLEAR FLOATS - repair
		- the simplest way is to add another element to the COLLAPSED HEIGHT element, like a div (without meaning)
		- select the clear element and use the CLEAR PROPERTY in CSS
		- other technique - CLEAR FIX HACK
		- on the element that has a collapsed height, we add the clearfix class, and in CSS we add a ::after pseuod element
		- the ::after pseudo element needs CONTENT, CLEAR, it's inline, so we need to make it DISPLAY:BLOCK

BUILDING A SIMPLE FLOAT LAYOUT
	- we select again all elements, NOT NECESSARY
	- we need to change the WIDTH of the elements we want SIDE BY SIDE
	- add the FLOAT property
	- for FOOTER, we clear the FLOAT since we don't want it to float around
	- to make a GAP, we can decrease the WIDTH

BOX-SIZING: BORDER-BOX
	- to create a problem, we will remove the margin of the RELAED LIST and add PADDING to aside
	- the element will dissapear from that place because it's too BIG
	- issue that WIDTH + PADDING = more than the space we have available
	- this issue is because that's how the BOX MODEL computes the height and width of the element (content+padding)
	- BOX SIZING : BORDER BOX
		- with this, we specify a width and a height and the element will auto adjust
	- BOX -SIZING: BORDER - BOX goes into the UNIVERSAL SELECTOR at the top 


FLEXBOX
	- DISPLAY: FLEX
	- element that has DISPLAY: FLEX = FLEX CONTAINER
	- items inside a FLEX CONTAINER are FLEX ITEMS
	- each of the FLEX ITEMS take exactly the space needed for CONTENT, on WIDTH
	- for HEIGHT, by default, all FLEX ITEMS are as tall as the TALLEST element

VERTICAL CENTRING
	- align-items: center/ flex-start / flex-bottom

HORIZONTAL CENTERING
	- justify-content: center / space-between

FLEXBOX Overview
- a set of realted CSS properties to build 1 dimensional layouts - on 1 row
- the empty space is divided automatically between the FLEX ITEMS
- makes easy to align FLEX ITEMS
- perfect for replacing old school FLOATS - easier to maintain and fewer code

FLEXBOX Terminology
- FLEX CONTAINER
	- display: flex
- FLEX ITEMS
	- childrens of the FLEX CONTAINER
- MAIN AXIS
	- the direction in which the FLEX ITEMS are layed out
	- we can change the direction of the MAIN AXIS
- CROSS AXIS
	- the vertical axis
	- we can also change the direction of this axis


FLEXBOX CSS properties - https://flexbox.malven.co/
- FLEX CONTAINER
	- gap: 0 
		- the space between FLEX ITEMS
	- justify-content: flex-start / flex-end / center / space-between / space-around
		- align items along the MAIN AXIS
	- align-items: strech/ flex-start/ flex-end/ center/ baseline
		- align FLEX ITEMS along CROSS AXIS
	- flex-direction: row / row-reverse/ column/ column-reverse
		- define which is the MAIN AXIS
	- flex-wrap: nowrap / wrap / wrap-reverse
		- wrap FLEX ITEMS into a new line if they are too large
	- align-content: strech / flex-start/ flex-end
		- only applies when there are multiple lines

- FLEX ITEMS
	- align-self: auto/ strech/ flex-start/ flex-end
		- to overwrite align-items for individual flex 
	- flex-grow: 0 / integer
		- allows an element to grow , 0 = no, 1+ = yes
	- flex-shrink: 0 / integer
		- allows an element to shrink, 0=no, 1+=yes
	- flex-basis: auto/ length
		- to define an item's width, instead of the width property
	- flex: 0 1 auto
		- shorthand for flex-grow, -shrink, -basis
	- order: 0 / integer	
		- conrol the order of FLEX ITEMS in CSS withou changing the HTML
		- by default, the order is 0 for all FLEX ELEMENTS


FLEX propery
- we can set these properties to all FLEX ITEMS or to single FLEX ITEMS
	- flex-basis: auto - default	
		- we can set the width of the FLEX ELEMENTS
		- it's more of a reccomendation that we are making to the browser
	- flex-shrink:1 - default
		- allows for elements to shrink to fill the FLEX CONTAINER
	- flex-grow: 0 - default
		- allows the elements to fill the entire FLEX CONTAINER

	- if all FLEX ELEMENTS have flex-grow:1 and a single FLEX ELEMENT has flex-grow:2, this element will have a double amount of growth than the rest, of course, of what is available from the extra space 

- as BEST PRACTICE, we should only use FLEX, not -basis, -shrink, -grow
- FLEX shorhand
	- flex: 1 means that flex-grow: 1
	- flex: 0 1 means that flex-grow:0 and flex-shrink:1
	- flex: 0 0 300px mean that flex-grow:0, flex-shrink:0 and flex-basis=300px


CSS GRID
- just like FLEX BOX, we have GRID CONTAINERS and GRID ITEMS
- similar logic
	- grid-template-columns: 250px 250px 150px 100px;
		- we manually as many columns as we want
		- in the example we have 4 columns
		-  the rows are created automatically, as many as needed

- all elements will strech to the highest HEIGHT

	- grid-template-rows: 100px 300px;
		- we can specify the HEIGHT of each row, and if the elements don't have a defined Height, they will strech

	- (grid-gap) or gap: 30px 
		- define a gap between elements, on columns and rows
	- column-gap: 30px
		- define the gap between columns
	- row-gap: 30px
		- define the gap between rows

CSS GRID Overview
- CSS GRID is a set if CSS properties for 2D layouts
- we can divide a container element into rows and columns and fill them with child elements
- less-nested HTML and easier-to-read CSS
- CSS is not MEANT TO REPLACE FLEXBOX
	- 1D layout - FLEXBOX
	- 2D layout - CSS GRID

CSS GRID Terminology
- GRID CONTAINER
	- setting a container the display: grid
- GRID ITEMS
	- elements in a grid container
- ROW AXIS
	- from left to right
- COLUMN AXIS
	- from top to bottom
- GRID LINES
	- number of columns + 1
		- 3 columns => 4 grid lines
	- number of rows + 1	
		- 2 rows => 3 grid lines
- GRID CELL
	- intersection of grid line
	- we can fill them with GRID ITEMS, or not
- GUTTERS(gaps)
	- spaces between GRID ITEMS
- GRID TRACK
	- a row or a columns
	- 2 rows and 3 columns => 2 row TRACKS and 3 column TRACKS


CSS GRID properties
- GRID CONTAINER
	- grid-template-rows: number of rows
	- grid-template-columns:  number of columns

	- row-gap: 0	
	- column-gap: 12px;		
		- Create empty spaces between TRACKS, on ROW level or COLUMN level

	- justify-items: strech / start / center / end
	- align-items: strech / start / center / end
		- align GRID ITEMS horizontally and vertically

	- justify-content: start / center / end ...
	- align-content: start /....
		- these apply to the ENTIRE GRID CONTAINER
		- Only applies if container is larger than GRID

- GRID ITEMS
	- grid-column: <start line> / <end line> | number
	- grid-row: <start line> / <end line> | number
		- place a GRID ITEM into a specific GRID CELL

	- justify-self: strech / start / center / end
	- align-self: strech / start / center / end
		- align the GRID ITEM individually

FR unit - fractional
- instead of px
- is adaptable, not rigid like px
	- grid-template-columns: 200px 100px 1fr 100px;
	- the 3 column has been expanded to fill the remaining space, and it's also SHRINKING

	- grid-template-columns: 200px 100px 1fr 1fr;
	- 3 and 4 columns will resize equally to fill the remaining space

	- grid-template-columns: 200px 100px 1fr 2fr;
	- 4 column will be double the size of 3 column

	- grid-template-columns: 1fr 1fr 1fr auto;
	- column 4 will take only the needed space

	- grid-template-columns: repeat(4, 1fr);
	- create 4 columns that will all be 1fr

	- grid-template-rows: 1fr 1fr
	- we NEED TO SPECIFY THE HEIGHT of the GRID CONTAINER to use FR on rows


PLACE GRID ITEMS into GRID CELLS
	- grid-column: 3 / 4
	- grid-row:4 / 5
		- will move the selected GRID ITEM to column 3 up to 4 row 4 up to 5

	- grid-column: 3 / 5
	- grid-row: 4 / 5
		- will move the selected GRID ITEM from column 3 up to 5 (2 columns) and 1 row

	- grid-column: 3/5;
        - grid-row: 2/4;

 	- grid-column: 3 / span 2 === grid-column: 3 / 5
	- grid-row : 1 / span 3 === grid-row: 1 / 4

	- grid-column: 3 / -1 
		- will span the element up to the last column
		- this happens becuase the columns and rows are also negative counted


